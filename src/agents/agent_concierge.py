import os
import json
import ast
from datetime import datetime, timedelta
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import AgentType, initialize_agent, Tool
from langchain.memory import ConversationBufferMemory

from .agent_guardian import GuardianAgent
from .agent_dynamo import DynamoAgent

USER_ID = "user_maria_123"

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_FILE = os.path.join(BASE_DIR, '..', 'data', 'customer_profile.json')

def read_database():
    with open(DB_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def write_database(data):
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4)

def get_user_context() -> str:
    """Verifica o contexto do usu√°rio, como cart√µes expirando. Use sempre no in√≠cio da conversa."""
    print(f"ü§ñ Grace: Verificando contexto para {USER_ID}")
    db = read_database()
    user = db.get(USER_ID)
    if not user:
        return "Usu√°rio n√£o encontrado."
    if user.get("proactive_alert"):
        alert_details = user["proactive_alert"]["details"]
        del user["proactive_alert"]
        write_database(db)
        return json.dumps({"proactive_alert": "blocked_transaction", "details": alert_details})
    for pm in user["payment_methods"]:
        if pm["type"] == "credit_card" and pm["expiry_date"]:
            expiry_year, expiry_month = map(int, pm["expiry_date"].split('-'))
            first_day_of_expiry_month = datetime(expiry_year, expiry_month, 1)
            effective_expiry_date = (first_day_of_expiry_month + timedelta(days=32)).replace(day=1)
            if datetime.now() >= effective_expiry_date:
                return json.dumps({
                    "proactive_alert": "expiring_card",
                    "details": f"notei que o seu cart√£o {pm['brand']} com final {pm['last4']} expirou em {expiry_month}/{expiry_year}. Para evitar problemas em sua assinatura, o ideal √© atualiz√°-lo."
                })
    return "Nenhum alerta proativo imediato."

def get_personal_info() -> str:
    """Busca as informa√ß√µes pessoais do usu√°rio."""
    print(f"ü§ñ Grace: Buscando informa√ß√µes de {USER_ID}")
    db = read_database()
    result = db.get(USER_ID, {}).get("personal_info", {})
    return json.dumps({"agent_source": "Agente Concierge", "result": result})

def update_personal_info(new_email: str = None, new_address: str = None) -> str:
    """Atualiza o e-mail ou endere√ßo do usu√°rio."""
    print(f"ü§ñ Grace: Atualizando informa√ß√µes de {USER_ID}")
    db = read_database()
    user = db.get(USER_ID)
    if not user:
        return json.dumps({"agent_source": "Agente Concierge", "result": "Usu√°rio n√£o encontrado."})
    if new_email:
        user["personal_info"]["email"] = new_email
    if new_address:
        user["personal_info"]["address"] = new_address
    write_database(db)
    return json.dumps({"agent_source": "Agente Concierge", "result": f"Informa√ß√µes atualizadas com sucesso!"})

def get_payment_methods() -> str:
    """Consulta os m√©todos de pagamento do usu√°rio."""
    print(f"ü§ñ Grace: Consultando m√©todos de pagamento de {USER_ID}")
    db = read_database()
    result = db.get(USER_ID, {}).get("payment_methods", [])
    return json.dumps({"agent_source": "Agente Concierge", "result": result})

def get_billing_history() -> str:
    """Consulta o hist√≥rico de faturamento do usu√°rio."""
    print(f"ü§ñ Grace: Consultando hist√≥rico de faturamento de {USER_ID}")
    db = read_database()
    result = db.get(USER_ID, {}).get("billing_history", [])
    return json.dumps({"agent_source": "Agente Concierge", "result": result})

def get_subscriptions() -> str:
    """Consulta as assinaturas e servi√ßos ativos do usu√°rio."""
    print(f"ü§ñ Grace: Consultando assinaturas de {USER_ID}")
    db = read_database()
    result = db.get(USER_ID, {}).get("subscriptions", [])
    return json.dumps({"agent_source": "Agente Concierge", "result": result})

def analyze_suspicious_transaction(transaction_id: str) -> str:
    """Analisa uma transa√ß√£o espec√≠fica que o usu√°rio considera suspeita."""
    print(f"ü§ñ Grace: Acionando Guardian para an√°lise da transa√ß√£o {transaction_id}")
    db = read_database()
    user_history = db.get(USER_ID, {}).get("billing_history", [])
    transaction_to_analyze = next((t for t in user_history if t["transaction_id"] == transaction_id), None)
    if not transaction_to_analyze:
        return json.dumps({"agent_source": "Agente Concierge", "result": f"Transa√ß√£o com ID {transaction_id} n√£o encontrada."})
    guardian_agent = GuardianAgent()
    analysis_result = guardian_agent.analyze_transaction(USER_ID, transaction_to_analyze)
    return json.dumps({"agent_source": "Agente Guardian", "result": analysis_result})

def get_dynamic_payment_options(transaction_id: str) -> str:
    """Verifica e oferece op√ß√µes de pagamento din√¢micas para uma fatura."""
    print(f"ü§ñ Grace: Acionando Dynamo para obter op√ß√µes para a transa√ß√£o {transaction_id}.")
    db = read_database()
    user = db.get(USER_ID)
    if not user: return json.dumps({"agent_source": "Agente Concierge", "result": "Usu√°rio n√£o encontrado."})
    transaction = next((t for t in user.get("billing_history", []) if t["transaction_id"] == transaction_id), None)
    if not transaction: return json.dumps({"agent_source": "Agente Concierge", "result": f"Transa√ß√£o {transaction_id} n√£o encontrada."})
    transaction_details_for_dynamo = {"amount_brl": transaction["amount_brl"], "location": transaction["location"], "time_on_page_seconds": 20}
    dynamo_agent = DynamoAgent()
    offer = dynamo_agent.generate_dynamic_offer(USER_ID, transaction_details_for_dynamo)
    return json.dumps({"agent_source": "Agente Dynamo", "result": offer})

def delete_payment_method(payment_method_id: str) -> str:
    """Remove um m√©todo de pagamento do perfil do usu√°rio."""
    print(f"ü§ñ Grace: Removendo o m√©todo de pagamento {payment_method_id}.")
    db = read_database()
    user = db.get(USER_ID)
    if not user:
        return json.dumps({"agent_source": "Agente Concierge", "result": "Usu√°rio n√£o encontrado."})
    initial_len = len(user["payment_methods"])
    user["payment_methods"] = [pm for pm in user["payment_methods"] if pm.get("id") != payment_method_id]
    if len(user["payment_methods"]) < initial_len:
        if user.get("preferred_payment_method_id") == payment_method_id:
            user["preferred_payment_method_id"] = None
        write_database(db)
        return json.dumps({"agent_source": "Agente Concierge", "result": f"M√©todo de pagamento {payment_method_id} removido com sucesso."})
    else:
        return json.dumps({"agent_source": "Agente Concierge", "result": f"M√©todo de pagamento com ID {payment_method_id} n√£o encontrado."})

class ConciergeAgent:
    def __init__(self):
        self.user_id = USER_ID
        self.llm = ChatGoogleGenerativeAI(model="gemini-pro-latest", temperature=0.1, convert_system_message_to_human=True)
        self.memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
        self.agent = self._create_agent()

    def _create_agent(self):
        tools = [
            Tool.from_function(func=lambda _: get_user_context(), name="Verificar Contexto do Usu√°rio", description="Sempre use esta ferramenta primeiro para verificar se h√° alguma a√ß√£o proativa a ser tomada, como um alerta de seguran√ßa ou um cart√£o expirado. N√£o requer argumentos."),
            Tool.from_function(func=lambda _: get_personal_info(), name="Consultar Informa√ß√µes Pessoais", description="√ötil para buscar o nome, e-mail ou endere√ßo do usu√°rio. N√£o requer argumentos."),
            Tool(name="Atualizar Informa√ß√µes Pessoais", func=lambda tool_input: update_personal_info(**ast.literal_eval(tool_input)), description="√ötil para alterar o e-mail ou endere√ßo do usu√°rio. Requer um dicion√°rio com os novos dados (new_email ou new_address)."),
            Tool.from_function(func=lambda _: get_payment_methods(), name="Consultar M√©todos de Pagamento", description="√ötil para listar os m√©todos de pagamento do usu√°rio. N√£o requer argumentos."),
            Tool.from_function(func=lambda _: get_billing_history(), name="Consultar Hist√≥rico de Faturamento", description="√ötil para ver as faturas passadas do usu√°rio. N√£o requer argumentos."),
            
            Tool.from_function(
                func=lambda _: get_subscriptions(), 
                name="Consultar Assinaturas Ativas", 
                description="Use esta ferramenta quando o usu√°rio perguntar sobre suas assinaturas, planos ou servi√ßos ativos."
            ),

            Tool(
                name="Analisar Transa√ß√£o Suspeita", 
                func=lambda tool_input: analyze_suspicious_transaction(**ast.literal_eval(tool_input)),
                description="Analisa uma transa√ß√£o suspeita usando seu ID. √â a √∫nica forma de obter uma an√°lise de risco. Se o usu√°rio mencionar uma cobran√ßa mas n√£o fornecer o ID exato (ex: 'a cobran√ßa de S√£o Paulo'), voc√™ deve primeiro usar a ferramenta 'Consultar Hist√≥rico de Faturamento' para listar as transa√ß√µes e ent√£o pedir para o usu√°rio confirmar o ID da transa√ß√£o que ele quer analisar."
            ),
            Tool(name="Oferecer Op√ß√µes de Pagamento Din√¢mico", func=lambda tool_input: get_dynamic_payment_options(**ast.literal_eval(tool_input)), description="Use para verificar e apresentar op√ß√µes de pagamento, como parcelamentos, para uma fatura. Requer um dicion√°rio com o ID da transa√ß√£o (transaction_id)."),
            Tool(
                name="Remover M√©todo de Pagamento",
                func=lambda tool_input: delete_payment_method(**ast.literal_eval(tool_input)),
                description="√ötil para apagar ou remover um m√©todo de pagamento existente, como um cart√£o de cr√©dito. Requer o ID exato do m√©todo de pagamento (`payment_method_id`). Se o usu√°rio n√£o fornecer o ID, voc√™ deve primeiro usar a ferramenta 'Consultar M√©todos de Pagamento' para listar os cart√µes e seus IDs, e ent√£o perguntar qual ele deseja remover."
            ),
        ]

        agent_system_prompt = f"""
        Voc√™ √© a Grace, a assistente pessoal de IA da Bemobi para a usu√°ria Maria Silva ({self.user_id}).
        Sua personalidade √© prestativa, emp√°tica e, acima de tudo, proativa. Voc√™ se comunica de forma clara e amig√°vel, como em uma conversa de WhatsApp.
        Seu objetivo √© transformar o autoatendimento em uma experi√™ncia f√°cil e guiada.

        **Instru√ß√µes Cr√≠ticas de Formata√ß√£o:**
        - Quando voc√™ precisar listar informa√ß√µes como faturas, assinaturas ou m√©todos de pagamento, SEMPRE use formata√ß√£o **Markdown** para maior clareza.
        - Para listas de itens (como faturas), use **tabelas Markdown** sempre que poss√≠vel. Use `R$` para valores monet√°rios.
        - Use t√≠tulos com **negrito** para separar as se√ß√µes da sua resposta.
        - Exemplo de uma boa tabela de faturamento:
        | ID da Fatura | Data       | Valor     |
        |--------------|------------|-----------|
        | txn_abc123   | 10/09/2025 | R$ 149,90 |
        | txn_def456   | 10/08/2025 | R$ 149,90 |

        **Instru√ß√µes Cr√≠ticas de Comportamento:**
        1.  **Seja Proativa:** No in√≠cio de CADA conversa, SEMPRE use a ferramenta "Verificar Contexto do Usu√°rio". Se houver um alerta, inicie a conversa abordando esse ponto de forma natural. Exemplo: "Ol√° Maria! Tudo bem? Antes de mais nada, notei que...".
        2.  **Atribui√ß√£o de Agente:** Se a ferramenta retornar "agent_source", comece sua resposta com "Grace(Nome do Agente): ". Ex: "Grace(Agente Guardian): Maria, analisei a transa√ß√£o e...". Sen√£o, responda normalmente como "Grace:".
        3.  **Linguagem Natural:** Fale com a Maria de forma pessoal e direta. Evite jarg√µes.
        """

        return initialize_agent(
            tools, self.llm, agent=AgentType.CONVERSATIONAL_REACT_DESCRIPTION, verbose=False,
            memory=self.memory, handle_parsing_errors=True, agent_kwargs={"system_message": agent_system_prompt}
        )

    def run(self, user_input):
        return self.agent.invoke({"input": user_input}).get("output", "Desculpe, Maria. Ocorreu um erro e n√£o consegui processar sua solicita√ß√£o.")

def create_concierge_agent():
    return ConciergeAgent()