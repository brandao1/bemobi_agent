import os
import json
from datetime import datetime, timedelta
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import AgentType, initialize_agent, Tool
from langchain.memory import ConversationBufferMemory

# --- 1. Fun√ß√µes de Intera√ß√£o com a Base de Dados (customer_profile.json) ---

DB_FILE = 'customer_profile.json'

def read_database():
    with open(DB_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def write_database(data):
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4)

# --- 2. Ferramentas do Agente Concierge ---

def get_user_context(user_id: str) -> str:
    """Verifica o contexto do usu√°rio, como cart√µes expirando. Use sempre no in√≠cio da conversa."""
    print(f"ü§ñ Concierge: Verificando contexto para {user_id}")
    db = read_database()
    user = db.get(user_id)
    if not user:
        return "Usu√°rio n√£o encontrado."

    for pm in user["payment_methods"]:
        if pm["type"] == "credit_card":
            expiry_year, expiry_month = map(int, pm["expiry_date"].split('-'))
            next_month = datetime.now() + timedelta(days=30)
            if expiry_year == next_month.year and expiry_month == next_month.month:
                return json.dumps({
                    "proactive_alert": "expiring_card",
                    "details": f"O cart√£o {pm['brand']} com final {pm['last4']} expira no pr√≥ximo m√™s."
                })
    return "Nenhum alerta proativo imediato."

def get_personal_info(user_id: str) -> str:
    """Busca as informa√ß√µes pessoais de um usu√°rio."""
    print(f"ü§ñ Concierge: Buscando informa√ß√µes de {user_id}")
    db = read_database()
    return json.dumps(db.get(user_id, {}).get("personal_info", {}))

def update_personal_info(user_id: str, new_email: str = None, new_address: str = None) -> str:
    """Atualiza o e-mail ou endere√ßo de um usu√°rio."""
    print(f"ü§ñ Concierge: Atualizando informa√ß√µes de {user_id}")
    db = read_database()
    user = db.get(user_id)
    if not user:
        return "Usu√°rio n√£o encontrado."
    if new_email:
        user["personal_info"]["email"] = new_email
    if new_address:
        user["personal_info"]["address"] = new_address
    write_database(db)
    return f"Informa√ß√µes de {user['personal_info']['name']} atualizadas com sucesso."

def get_payment_methods(user_id: str) -> str:
    """Consulta os m√©todos de pagamento de um usu√°rio."""
    print(f"ü§ñ Concierge: Consultando m√©todos de pagamento de {user_id}")
    db = read_database()
    return json.dumps(db.get(user_id, {}).get("payment_methods", []))

def get_billing_history(user_id: str) -> str:
    """Consulta o hist√≥rico de faturamento de um usu√°rio."""
    print(f"ü§ñ Concierge: Consultando hist√≥rico de faturamento de {user_id}")
    db = read_database()
    return json.dumps(db.get(user_id, {}).get("billing_history", []))

# --- 3. Classe e Factory do Agente ---

class ConciergeAgent:
    def __init__(self, user_id):
        self.user_id = user_id
        self.llm = ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest", temperature=0.2)
        self.memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
        self.agent = self._create_agent()

    def _create_agent(self):
        # As fun√ß√µes precisam ser recriadas como lambdas para capturar o self.user_id
        tools = [
            Tool.from_function(lambda: get_user_context(self.user_id), name="Verificar Contexto do Usu√°rio", description="Sempre use esta ferramenta primeiro para verificar se h√° alguma a√ß√£o proativa a ser tomada para o usu√°rio."),
            Tool.from_function(lambda: get_personal_info(self.user_id), name="Consultar Informa√ß√µes Pessoais", description="√ötil para buscar o nome, e-mail ou endere√ßo do usu√°rio."),
            Tool.from_function(update_personal_info, name="Atualizar Informa√ß√µes Pessoais", description="√ötil para alterar o e-mail ou endere√ßo do usu√°rio. Requer o user_id e os novos dados."),
            Tool.from_function(lambda: get_payment_methods(self.user_id), name="Consultar M√©todos de Pagamento", description="√ötil para listar os m√©todos de pagamento do usu√°rio."),
            Tool.from_function(lambda: get_billing_history(self.user_id), name="Consultar Hist√≥rico de Faturamento", description="√ötil para ver as faturas passadas do usu√°rio."),
        ]

        agent_system_prompt = f"""
        Voc√™ √© o Concierge, um assistente de IA da Bemobi para o usu√°rio {self.user_id}.
        Sua personalidade √©: prestativo, amig√°vel e, acima de tudo, proativo.
        Seu objetivo √© transformar o autoatendimento em uma experi√™ncia f√°cil e guiada.

        **Instru√ß√µes Cr√≠ticas:**
        1.  **Seja Proativo:** Ao iniciar, SEMPRE use a ferramenta "Verificar Contexto do Usu√°rio" para ver se h√° algum problema iminente (como um cart√£o expirando). Se houver, inicie a conversa abordando esse ponto.
        2.  **Use o ID do Usu√°rio:** Todas as ferramentas j√° est√£o configuradas para usar o ID '{self.user_id}'. Voc√™ n√£o precisa pass√°-lo novamente.
        3.  **Fale com Clareza:** Use linguagem natural e evite jarg√µes.
        """

        return initialize_agent(
            tools,
            self.llm,
            agent=AgentType.CONVERSATIONAL_REACT_DESCRIPTION,
            verbose=True,
            memory=self.memory,
            agent_kwargs={
                "system_message": agent_system_prompt
            }
        )

    def run(self, user_input):
        return self.agent.invoke({"input": user_input})

# Factory para criar uma inst√¢ncia do agente para um usu√°rio espec√≠fico
def create_concierge_agent(user_id):
    return ConciergeAgent(user_id)