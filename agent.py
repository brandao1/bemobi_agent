import google.generativeai as genai
import os
import json


# --- 1. Configura√ß√£o Inicial e Banco de Dados Falso (Mock) ---

# Cole sua API Key aqui ou configure como uma vari√°vel de ambiente
# os.environ['GOOGLE_API_KEY'] = "SUA_API_KEY"
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Simula√ß√£o de um banco de dados de usu√°rios e servi√ßos.
# Em um sistema real, isso seria um banco de dados SQL, NoSQL, etc.
mock_user_database = {
    "user_123": {
        "name": "Victor",
        "email": "victor@email.com",
        "subscriptions": [
            {
                "service_name": "GamePass Ultimate",
                "plan": "Premium",
                "price_brl": 49.99,
                "next_billing_date": "2025-10-05",
                "payment_method": "Cart√£o final 4021"
            }
        ],
        "payment_history": [
            {"date": "2025-09-05", "description": "Cobran√ßa mensal GamePass", "amount_brl": 49.99},
            {"date": "2025-09-15", "description": "Compra de item 'XP extra'", "amount_brl": 15.00}
        ]
    }
}

mock_service_providers_br = {
    "netflix": {"provider": "Netflix Brasil", "type": "Streaming de V√≠deo"},
    "spotify": {"provider": "Spotify AB", "type": "Streaming de M√∫sica"},
    "gamepass": {"provider": "Microsoft", "type": "Servi√ßo de Jogos"},
    "office 365": {"provider": "Microsoft", "type": "Software de Produtividade"},
    "aws": {"provider": "Amazon Web Services", "type": "Computa√ß√£o em Nuvem"}
}


# --- 2. Defini√ß√£o das Ferramentas (Tools) que o Gemini pode usar ---
# As descri√ß√µes (docstrings) s√£o MUITO importantes, pois √© assim que o Gemini
# aprende o que cada ferramenta faz.

def search_service_providers(service_name: str) -> str:
    """
    Busca provedores para um servi√ßo espec√≠fico dispon√≠vel no Brasil.
    Retorna o nome do provedor e o tipo de servi√ßo.
    """
    print(f"ü§ñ Executando busca pelo servi√ßo: {service_name}")
    service_key = service_name.lower().replace(" ", "")
    provider_info = mock_service_providers_br.get(service_key)
    if provider_info:
        return json.dumps(provider_info)
    else:
        return json.dumps({"error": "Servi√ßo n√£o encontrado."})

def get_user_account_status(user_id: str, service_name: str) -> str:
    """
    Verifica no banco de dados interno se um usu√°rio j√° possui uma assinatura
    ativa para um servi√ßo espec√≠fico.
    """
    print(f"ü§ñ Verificando status da conta para {user_id} no servi√ßo {service_name}")
    user = mock_user_database.get(user_id, {})
    for sub in user.get("subscriptions", []):
        if service_name.lower() in sub["service_name"].lower():
            return json.dumps({"status": "active", "details": sub})
    return json.dumps({"status": "inactive"})

def create_subscription(user_id: str, service_name: str, payment_method: str) -> str:
    """
    Cria uma nova assinatura para um usu√°rio em um servi√ßo espec√≠fico,
    processando o primeiro pagamento. (Simula√ß√£o)
    """
    print(f"ü§ñ Criando assinatura de {service_name} para {user_id} com {payment_method}")
    # L√≥gica para adicionar a assinatura ao mock_user_database aqui...
    return json.dumps({"status": "success", "message": f"Assinatura de {service_name} criada com sucesso!"})

def get_user_plan_details(user_id: str) -> str:
    """
    Consulta e retorna os detalhes do plano e assinaturas atuais do usu√°rio.
    """
    print(f"ü§ñ Buscando detalhes do plano para {user_id}")
    user = mock_user_database.get(user_id, {})
    subscriptions = user.get("subscriptions", [])
    if subscriptions:
        return json.dumps(subscriptions)
    return json.dumps({"error": "Nenhuma assinatura ativa encontrada."})

def resolve_billing_issue(user_id: str, issue_description: str) -> str:
    """
    Analisa o hist√≥rico de pagamentos do usu√°rio para resolver uma d√∫vida
    sobre cobran√ßa.
    """
    print(f"ü§ñ Analisando problema de cobran√ßa para {user_id}: '{issue_description}'")
    user = mock_user_database.get(user_id, {})
    history = user.get("payment_history", [])
    # IA do Gemini analisar√° o hist√≥rico junto com a pergunta para dar a resposta
    return json.dumps(history)

# --- 3. Inicializa√ß√£o do Modelo Gemini e do Chat ---

# Habilita o "Function Calling" autom√°tico
model = genai.GenerativeModel(
    model_name='gemini-1.5-pro-latest',
    tools=[
        search_service_providers,
        get_user_account_status,
        create_subscription,
        get_user_plan_details,
        resolve_billing_issue
    ]
)

# Inicia o chat
chat = model.start_chat(enable_automatic_function_calling=True)

print("--- Prot√≥tipo do Agente Grace (Conectado √† Bemobi) ---")
print("Para simular, voc√™ √© o usu√°rio 'user_123'. Digite 'sair' para terminar.")

# --- 4. Loop de Conversa (Simula√ß√£o do WhatsApp) ---

while True:
    prompt = input("Voc√™: ")
    if prompt.lower() == 'sair':
        break

    # Adiciona o ID do usu√°rio ao prompt para o agente saber quem est√° falando
    # Numa integra√ß√£o real, o ID viria do n√∫mero do WhatsApp
    contextual_prompt = f"O usu√°rio 'user_123' diz: {prompt}"

    response = chat.send_message(contextual_prompt)

    print(f"Agente Grace: {response.text}\n")